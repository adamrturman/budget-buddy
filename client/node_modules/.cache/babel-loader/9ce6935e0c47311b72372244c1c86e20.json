{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/adamrturman/Desktop/coding/budget-buddy/client/src/AuthExample.tsx\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom'; // props will include a `user` object or empty object\n// props will include a `component` as `Component` or a `render`\n// all other props that may be passed in are `..rest`\n\nconst AuthenticatedRoute = ({\n  user,\n  component: Component,\n  render,\n  ...rest\n}) => {\n  // if props include a `user` object and a `render` then create route with `render`\n  if (user && render) {\n    return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n      render: render\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this); // if props include a `user` object but no `render` then create route with `Component`\n    // if props do not include a `user` object then redirect to home\n  } else {\n    return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n      render: props => user ? /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 14\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_c = AuthenticatedRoute;\nexport default AuthenticatedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthenticatedRoute\");","map":{"version":3,"sources":["/Users/adamrturman/Desktop/coding/budget-buddy/client/src/AuthExample.tsx"],"names":["React","Route","Redirect","AuthenticatedRoute","user","component","Component","render","rest","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC,C,CAEA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAG,CAAC;AAC1BC,EAAAA,IAD0B;AAE1BC,EAAAA,SAAS,EAAEC,SAFe;AAG1BC,EAAAA,MAH0B;AAI1B,KAAGC;AAJuB,CAAD,KAKrB;AACJ;AACA,MAAIJ,IAAI,IAAIG,MAAZ,EAAoB;AAClB,wBAAO,QAAC,KAAD,OAAWC,IAAX;AAAiB,MAAA,MAAM,EAAED;AAAzB;AAAA;AAAA;AAAA;AAAA,YAAP,CADkB,CAGpB;AACA;AACC,GALD,MAKO;AACL,wBAAO,QAAC,KAAD,OAAWC,IAAX;AAAiB,MAAA,MAAM,EAAEC,KAAK,IACnCL,IAAI,gBAAG,QAAC,SAAD,OAAeK;AAAf;AAAA;AAAA;AAAA;AAAA,cAAH,gBAA8B,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AAD7B;AAAA;AAAA;AAAA;AAAA,YAAP;AAGD;AACF,CAjBD;;KAAMN,kB;AAmBN,eAAeA,kBAAf","sourcesContent":["import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n\n// props will include a `user` object or empty object\n// props will include a `component` as `Component` or a `render`\n// all other props that may be passed in are `..rest`\nconst AuthenticatedRoute = ({\n  user,\n  component: Component,\n  render,\n  ...rest\n}) => {\n  // if props include a `user` object and a `render` then create route with `render`\n  if (user && render) {\n    return <Route {...rest} render={render} />\n\n  // if props include a `user` object but no `render` then create route with `Component`\n  // if props do not include a `user` object then redirect to home\n  } else {\n    return <Route {...rest} render={props =>\n      user ? <Component {...props} /> : <Redirect to='/' />\n    } />\n  }\n}\n\nexport default AuthenticatedRoute"]},"metadata":{},"sourceType":"module"}